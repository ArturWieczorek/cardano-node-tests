name: Regression tests reusable

on:
  workflow_call:
    inputs:
      env-path:
        required: false
        type: string
        default: ""
      node_rev:
        required: false
        type: string
        default: ""
      node_branch:
        required: false
        type: string
        default: ""
      dbsync_rev:
        required: false
        type: string
        default: ""
      dbsync_branch:
        required: false
        type: string
        default: ""
      cluster_era:
        required: false
        type: string
        default: ""
      tx_era:
        required: false
        type: string
        default: ""
      markexpr:
        required: false
        type: string
        default: ""
      topology:
        required: false
        type: string
        default: ""
      scripts_dirname:
        required: false
        type: string
        default: ""
      enable_dbsync:
        required: false
        type: boolean
        default: false
      fast_cluster:
        required: false
        type: boolean
        default: false
      testrun_name:
        required: false
        type: string
        default: ""
      skip_passed:
        required: false
        type: boolean
        default: false
    secrets:
      TCACHE_BASIC_AUTH:
        required: false
      TCACHE_URL:
        required: false

jobs:
  reusable_run:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: cachix/install-nix-action@v18
        with:
          extra_nix_config: |
            trusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= hydra.iohk.io:f/Ea+s+dFdN+3Y/G+FDgSq+a5NEWhJGzdjvKNGv0/EQ= iohk.cachix.org-1:DpRUyj7h7V830dp/i6Nti+NEO2/nhblbov/8MW7Rqoo=
            substituters = https://cache.nixos.org https://cache.iog.io https://iohk.cachix.org
            allow-import-from-derivation = true
      - name: Collect env variables
        run: |
          : > .github_ci_env
          echo "PY_COLORS=1" >> .github_ci_env
          echo "NODE_REV=${{ inputs.node_rev }}" >> .github_ci_env
          echo "NODE_BRANCH=${{ inputs.node_branch }}" >> .github_ci_env
          echo "DBSYNC_REV=${{ inputs.dbsync_rev }}" >> .github_ci_env
          echo "DBSYNC_BRANCH=${{ inputs.dbsync_branch }}" >> .github_ci_env
          echo "CLUSTER_ERA=${{ inputs.cluster_era }}" >> .github_ci_env
          echo "TX_ERA=${{ inputs.tx_era }}" >> .github_ci_env
          echo "MARKEXPR=${{ inputs.markexpr }}" >> .github_ci_env
          echo "SCRIPTS_DIRNAME=${{ inputs.scripts_dirname }}" >> .github_ci_env
          echo "CI_TOPOLOGY=${{ inputs.topology }}" >> .github_ci_env
          echo "CI_ENABLE_DBSYNC=${{ inputs.enable_dbsync }}" >> .github_ci_env
          echo "CI_FAST_CLUSTER=${{ inputs.fast_cluster }}" >> .github_ci_env
          echo "CI_TESTRUN_NAME=${{ inputs.testrun_name }}" >> .github_ci_env
          echo "CI_SKIP_PASSED=${{ inputs.skip_passed }}" >> .github_ci_env
          if [ -e "${{ inputs.env-path }}" ]; then cat "${{ inputs.env-path }}" >> .github_ci_env; fi
      - name: Export env variables
        run: |
          cat .github_ci_env
          cat .github_ci_env >> $GITHUB_ENV
      - name: Get previous test results
        if: inputs.testrun_name && inputs.skip_passed
        run: |
          if [ -n "${{ secrets.TCACHE_BASIC_AUTH }}" ] && [ -n "${{ secrets.TCACHE_URL }}" ]; then
            curl -s -u ${{ secrets.TCACHE_BASIC_AUTH }} "${{ secrets.TCACHE_URL }}/${{ inputs.testrun_name }}/pypassed" > deselected_tests.txt
            echo "DESELECT_FROM_FILE=deselected_tests.txt" >> $GITHUB_ENV
          fi
      - name: Run CLI regression tests
        run: .github/regression.sh
      - name: Report test results
        if: (success() || failure()) && inputs.testrun_name
        run: |
          if [ -n "${{ secrets.TCACHE_BASIC_AUTH }}" ] && [ -n "${{ secrets.TCACHE_URL }}" ]; then
            curl -s -X PUT --fail-with-body -u ${{ secrets.TCACHE_BASIC_AUTH }} "${{ secrets.TCACHE_URL }}/${{ inputs.testrun_name }}/${{ github.run_number }}/import" -F "junitxml=@testrun-report.xml"
          fi
      - name: Upload testing artifacts on failure
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: testing-artifacts
          path: testing_artifacts.tar.xz
      - name: Upload Allure results
        uses: actions/upload-artifact@v3
        # When using `always()`, you lose ability to manually cancel the workflow.
        # Use `success() || failure()` instead.
        if: success() || failure()
        with:
          name: allure-results
          path: allure-results.tar.xz
      - name: Upload HTML report
        uses: actions/upload-artifact@v3
        if: success() || failure()
        with:
          name: testrun-report
          path: testrun-report.html
      - name: Upload testrun files
        uses: actions/upload-artifact@v3
        if: success() || failure()
        with:
          name: testrun-files
          path: |
            cli_coverage.json
            scheduling.log.xz
            errors_all.log
            testrun-report.xml
            deselected_tests.txt
