#!/usr/bin/env bash

# controlling environment variables:
# DBSYNC_REPO - will start and configure db-sync if the value is path to db-sync repository
# ENABLE_P2P - if set, local cluster will use P2P

set -euo pipefail
sets="$-"

SCRIPT_DIR="$(readlink -m "${0%/*}")"
SOCKET_PATH="$(readlink -m "$CARDANO_NODE_SOCKET_PATH")"
STATE_CLUSTER="${SOCKET_PATH%/*}"
STATE_CLUSTER_NAME="${STATE_CLUSTER##*/}"

NUM_BFT_NODES=1
NUM_POOLS=3
NETWORK_MAGIC=42
PROPOSAL_DELAY=5
BYRON_SECURITY_PARAM=10
POOL_PLEDGE=1000000000000

MAX_SUPPLY=45000000000000000
BYRON_INIT_SUPPLY=10020000000
# TODO: see https://github.com/input-output-hk/cardano-node/issues/4556
INIT_SUPPLY="$((MAX_SUPPLY / 4))"  # in reality, it will be `INIT_SUPPLY * 1.8`
DELEG_SUPPLY="$((MAX_SUPPLY / 8))" # in reality, it will be `DELEG_SUPPLY * 1.6`

if [ -f "$STATE_CLUSTER/supervisord.pid" ]; then
  echo "Cluster already running. Please run \`$SCRIPT_DIR/stop-cluster-hfc\` first!" >&2
  exit 1
fi

cardano_cli_log() {
  echo cardano-cli "$@" >> "$STATE_CLUSTER/start_cluster_cmds.log"

  for _ in {1..3}; do
    set +e
    out="$(cardano-cli "$@" 2>&1)"
    retval="$?"
    set -"$sets"

    case "$out" in
      *"resource vanished"*)
        printf "Retrying \`cardano-cli %s\`. Failure:\n%s\n" "$*" "$out" >&2
        sleep 1
        ;;
      *)
        if [ -n "$out" ]; then echo "$out"; fi
        break
        ;;
    esac
  done

  return "$retval"
}

if [ -e "$SCRIPT_DIR/shell_env" ]; then
  # shellcheck disable=SC1090,SC1091
  source "$SCRIPT_DIR/shell_env"
fi

rm -rf "$STATE_CLUSTER"
mkdir -p "$STATE_CLUSTER"/{shelley,webserver,db-sync,create_staked}
cd "$STATE_CLUSTER/.."

cp "$SCRIPT_DIR"/cardano-node-* "$STATE_CLUSTER"
cp "$SCRIPT_DIR"/cardano-submit-api "$STATE_CLUSTER"
cp "$SCRIPT_DIR/byron-params.json" "$STATE_CLUSTER"
cp "$SCRIPT_DIR/dbsync-config.yaml" "$STATE_CLUSTER"
cp "$SCRIPT_DIR/submit-api-config.yaml" "$STATE_CLUSTER"
cp "$SCRIPT_DIR/supervisor.conf" "$STATE_CLUSTER"
cp "$SCRIPT_DIR"/genesis*.spec.json "$STATE_CLUSTER/shelley/"
cp "$SCRIPT_DIR"/genesis*.spec.json "$STATE_CLUSTER/create_staked/"

if [ -n "${ENABLE_P2P:-""}" ]; then
  # use P2P topology files
  for tconf in "$SCRIPT_DIR"/p2p-topology-*.json; do
    tfname="${tconf##*/p2p-}"
    cp "$tconf" "${STATE_CLUSTER}/${tfname}"
  done
else
  cp "$SCRIPT_DIR"/topology-*.json "$STATE_CLUSTER"
fi

# enable db-sync service
if [ -n "${DBSYNC_REPO:-""}" ]; then
  [ -e "$DBSYNC_REPO/db-sync-node/bin/cardano-db-sync" ] || \
    { echo "The \`$DBSYNC_REPO/db-sync-node/bin/cardano-db-sync\` not found, line $LINENO" >&2; exit 1; }  # assert

  # create clean database
  "$SCRIPT_DIR/postgres-setup.sh"

  cat >> "$STATE_CLUSTER/supervisor.conf" <<EoF

[program:dbsync]
command=$SCRIPT_DIR/run_dbsync.sh
stderr_logfile=./$STATE_CLUSTER_NAME/dbsync.stderr
stdout_logfile=./$STATE_CLUSTER_NAME/dbsync.stdout
autostart=false
autorestart=false
startsecs=3
EoF
fi

# enable cardano-submit-api service
if type cardano-submit-api >/dev/null 2>&1; then
  cat >> "$STATE_CLUSTER/supervisor.conf" <<EoF

[program:submit_api]
command=$SCRIPT_DIR/cardano-submit-api
stderr_logfile=./$STATE_CLUSTER_NAME/submit_api.stderr
stdout_logfile=./$STATE_CLUSTER_NAME/submit_api.stdout
autostart=false
autorestart=false
startsecs=3
EoF
fi

START_TIME_SHELLEY=$(date --utc +"%Y-%m-%dT%H:%M:%SZ" --date="5 seconds")
START_TIME=$(date +%s --date="$START_TIME_SHELLEY")
echo "$START_TIME" > "$STATE_CLUSTER/cluster_start_time"

cardano_cli_log byron genesis genesis \
  --protocol-magic "$NETWORK_MAGIC" \
  --k "$BYRON_SECURITY_PARAM" \
  --n-poor-addresses 0 \
  --n-delegate-addresses "$NUM_POOLS" \
  --total-balance "$BYRON_INIT_SUPPLY" \
  --delegate-share 1 \
  --avvm-entry-count 0 \
  --avvm-entry-balance 0 \
  --protocol-parameters-file "$STATE_CLUSTER/byron-params.json" \
  --genesis-output-dir "$STATE_CLUSTER/byron" \
  --start-time "$START_TIME"

mv "$STATE_CLUSTER/byron-params.json" "$STATE_CLUSTER/byron/params.json"

cardano_cli_log genesis create-staked \
  --genesis-dir "$STATE_CLUSTER/create_staked" \
  --testnet-magic "$NETWORK_MAGIC" \
  --gen-pools "$NUM_POOLS" \
  --gen-utxo-keys 1 \
  --supply "$INIT_SUPPLY" \
  --gen-stake-delegs "$NUM_POOLS" \
  --supply-delegated "$DELEG_SUPPLY" \
  --start-time "$START_TIME_SHELLEY"

mv "$STATE_CLUSTER/create_staked/delegate-keys" "$STATE_CLUSTER/shelley/delegate-keys"
mv "$STATE_CLUSTER/create_staked/genesis-keys" "$STATE_CLUSTER/shelley/genesis-keys"
jq \
  --argjson max_supply "$MAX_SUPPLY" \
  '.maxLovelaceSupply = $max_supply' \
  "$STATE_CLUSTER/create_staked/genesis.json" > "$STATE_CLUSTER/shelley/genesis.json"
rm -f "$STATE_CLUSTER/create_staked/genesis.json"
mv "$STATE_CLUSTER"/create_staked/genesis*.json "$STATE_CLUSTER/shelley/"

mv "$STATE_CLUSTER/create_staked/utxo-keys/utxo1.skey" "$STATE_CLUSTER/shelley/genesis-utxo.skey"
mv "$STATE_CLUSTER/create_staked/utxo-keys/utxo1.vkey" "$STATE_CLUSTER/shelley/genesis-utxo.vkey"
cardano_cli_log address build --payment-verification-key-file \
  "$STATE_CLUSTER/shelley/genesis-utxo.vkey" \
  --out-file "$STATE_CLUSTER/shelley/genesis-utxo.addr" \
  --testnet-magic "$NETWORK_MAGIC"

mv "$STATE_CLUSTER/create_staked/stake-delegator-keys" "$STATE_CLUSTER/shelley/stake-delegator-keys"

BYRON_GENESIS_HASH="$(cardano_cli_log byron genesis print-genesis-hash --genesis-json \
  "$STATE_CLUSTER/byron/genesis.json")"
SHELLEY_GENESIS_HASH="$(cardano_cli_log genesis hash --genesis \
  "$STATE_CLUSTER/shelley/genesis.json")"
ALONZO_GENESIS_HASH="$(cardano_cli_log genesis hash --genesis \
  "$STATE_CLUSTER/shelley/genesis.alonzo.json")"
for conf in "$SCRIPT_DIR"/config-*.json; do
  fname="${conf##*/}"
  jq \
    --arg byron_hash "$BYRON_GENESIS_HASH" \
    --arg shelley_hash "$SHELLEY_GENESIS_HASH" \
    --arg alonzo_hash "$ALONZO_GENESIS_HASH" \
    '.ByronGenesisHash = $byron_hash
    | .ShelleyGenesisHash = $shelley_hash
    | .AlonzoGenesisHash = $alonzo_hash' \
    "$conf" > "$STATE_CLUSTER/$fname"

  # enable P2P
  if [ -n "${ENABLE_P2P:-""}" ]; then
    jq \
      '.EnableP2P = true
      | .MaxConcurrencyBulkSync = 2
      | .MaxConcurrencyDeadline = 4
      | .TargetNumberOfRootPeers = 100
      | .TargetNumberOfKnownPeers = 100
      | .TargetNumberOfEstablishedPeers = 50
      | .TargetNumberOfActivePeers = 20
      | .TraceBlockFetchClient = true
      | .TraceChainSyncClient = true' \
      "$STATE_CLUSTER/$fname" > "$STATE_CLUSTER/${fname}_jq"
    cat "$STATE_CLUSTER/${fname}_jq" > "$STATE_CLUSTER/$fname"
    rm -f "$STATE_CLUSTER/${fname}_jq"
  fi
done

for i in $(seq 1 $NUM_BFT_NODES); do
  mkdir -p "$STATE_CLUSTER/nodes/node-bft$i"
  BFT_PORT=$(("30000" + i))
  echo "$BFT_PORT" > "$STATE_CLUSTER/nodes/node-bft$i/port"
done

for i in $(seq 1 $NUM_POOLS); do
  mkdir -p "$STATE_CLUSTER/nodes/node-pool$i"
  mv "$STATE_CLUSTER/create_staked/pools/cold$i.skey" "$STATE_CLUSTER/nodes/node-pool$i/cold.skey"
  mv "$STATE_CLUSTER/create_staked/pools/cold$i.vkey" "$STATE_CLUSTER/nodes/node-pool$i/cold.vkey"

  mv "$STATE_CLUSTER/create_staked/pools/kes$i.skey" "$STATE_CLUSTER/nodes/node-pool$i/kes.skey"
  mv "$STATE_CLUSTER/create_staked/pools/kes$i.vkey" "$STATE_CLUSTER/nodes/node-pool$i/kes.vkey"

  mv "$STATE_CLUSTER/create_staked/pools/opcert$i.cert" "$STATE_CLUSTER/nodes/node-pool$i/op.cert"
  mv "$STATE_CLUSTER/create_staked/pools/opcert$i.counter" "$STATE_CLUSTER/nodes/node-pool$i/cold.counter"

  # stake reward keys
  mv "$STATE_CLUSTER/create_staked/pools/staking-reward$i.skey" "$STATE_CLUSTER/nodes/node-pool$i/reward.skey"
  mv "$STATE_CLUSTER/create_staked/pools/staking-reward$i.vkey" "$STATE_CLUSTER/nodes/node-pool$i/reward.vkey"

  mv "$STATE_CLUSTER/create_staked/pools/vrf$i.skey" "$STATE_CLUSTER/nodes/node-pool$i/vrf.skey"
  mv "$STATE_CLUSTER/create_staked/pools/vrf$i.vkey" "$STATE_CLUSTER/nodes/node-pool$i/vrf.vkey"

  echo "Generating Pool $i Secrets"

  # pool owner addresses and keys
  cardano_cli_log address key-gen \
    --signing-key-file "$STATE_CLUSTER/nodes/node-pool$i/owner-utxo.skey" \
    --verification-key-file "$STATE_CLUSTER/nodes/node-pool$i/owner-utxo.vkey"
  cardano_cli_log stake-address key-gen \
    --signing-key-file "$STATE_CLUSTER/nodes/node-pool$i/owner-stake.skey" \
    --verification-key-file "$STATE_CLUSTER/nodes/node-pool$i/owner-stake.vkey"
  #   payment address
  cardano_cli_log address build \
    --payment-verification-key-file "$STATE_CLUSTER/nodes/node-pool$i/owner-utxo.vkey" \
    --stake-verification-key-file "$STATE_CLUSTER/nodes/node-pool$i/owner-stake.vkey" \
    --testnet-magic "$NETWORK_MAGIC" \
    --out-file "$STATE_CLUSTER/nodes/node-pool$i/owner.addr"
  #   stake address
  cardano_cli_log stake-address build \
    --stake-verification-key-file "$STATE_CLUSTER/nodes/node-pool$i/owner-stake.vkey" \
    --testnet-magic "$NETWORK_MAGIC" \
    --out-file "$STATE_CLUSTER/nodes/node-pool$i/owner-stake.addr"
  #   stake address registration cert
  cardano_cli_log stake-address registration-certificate \
    --stake-verification-key-file "$STATE_CLUSTER/nodes/node-pool$i/owner-stake.vkey" \
    --out-file "$STATE_CLUSTER/nodes/node-pool$i/stake.reg.cert"

  # stake reward address registration cert
  cardano_cli_log stake-address registration-certificate \
    --stake-verification-key-file "$STATE_CLUSTER/nodes/node-pool$i/reward.vkey" \
    --out-file "$STATE_CLUSTER/nodes/node-pool$i/stake-reward.reg.cert"

  # stake address delegation certs
  cardano_cli_log stake-address delegation-certificate \
    --stake-verification-key-file "$STATE_CLUSTER/nodes/node-pool$i/owner-stake.vkey" \
    --cold-verification-key-file  "$STATE_CLUSTER/nodes/node-pool$i/cold.vkey" \
    --out-file "$STATE_CLUSTER/nodes/node-pool$i/owner-stake.deleg.cert"

  POOL_NAME="TestPool$i"
  POOL_DESC="Test Pool $i"
  POOL_TICKER="TEST$i"

  cat > "$STATE_CLUSTER/webserver/pool$i.html" <<EoF
<!DOCTYPE html>
<html>
<head>
<title>$POOL_NAME</title>
</head>
<body>
name: <strong>$POOL_NAME</strong><br>
description: <strong>$POOL_DESC</strong><br>
ticker: <strong>$POOL_TICKER</strong><br>
</body>
</html>
EoF

  echo "Generating Pool $i Metadata"
  jq -n \
    --arg name "$POOL_NAME" \
    --arg description "$POOL_DESC" \
    --arg ticker "$POOL_TICKER" \
    --arg homepage "http://localhost:30000/pool$i.html" \
    '{"name": $name, "description": $description, "ticker": $ticker, "homepage": $homepage}' \
    > "$STATE_CLUSTER/webserver/pool$i.json"

  METADATA_URL="http://localhost:30000/pool$i.json"
  METADATA_HASH=$(cardano_cli_log stake-pool metadata-hash --pool-metadata-file \
    "$STATE_CLUSTER/webserver/pool$i.json")
  POOL_PORT=$(("30000" + "$NUM_BFT_NODES" + i))
  echo "$POOL_PORT" > "$STATE_CLUSTER/nodes/node-pool$i/port"
  echo $POOL_PLEDGE > "$STATE_CLUSTER/nodes/node-pool$i/pledge"

  cardano_cli_log stake-pool registration-certificate \
    --cold-verification-key-file "$STATE_CLUSTER/nodes/node-pool$i/cold.vkey" \
    --vrf-verification-key-file "$STATE_CLUSTER/nodes/node-pool$i/vrf.vkey" \
    --pool-pledge "$POOL_PLEDGE" \
    --pool-margin 0.35 \
    --pool-cost 600 \
    --pool-reward-account-verification-key-file "$STATE_CLUSTER/nodes/node-pool$i/reward.vkey" \
    --pool-owner-stake-verification-key-file "$STATE_CLUSTER/nodes/node-pool$i/owner-stake.vkey" \
    --metadata-url "$METADATA_URL" \
    --metadata-hash "$METADATA_HASH" \
    --pool-relay-port "$POOL_PORT" \
    --pool-relay-ipv4 "127.0.0.1" \
    --testnet-magic "$NETWORK_MAGIC" \
    --out-file "$STATE_CLUSTER/nodes/node-pool$i/register.cert"
done

rm -rf "$STATE_CLUSTER/shelley/create_staked"

# create scripts for cluster starting / stopping
printf "#!/bin/sh\n\nsupervisorctl start all" > "$STATE_CLUSTER/supervisorctl_start"
printf "#!/bin/sh\n\nsupervisorctl restart nodes:" > "$STATE_CLUSTER/supervisorctl_restart_nodes"
printf "#!/bin/sh\n\nsupervisorctl \"\$@\"" > "$STATE_CLUSTER/supervisorctl"
cat > "$STATE_CLUSTER/supervisord_start" <<EoF
#!/usr/bin/env bash

set -uo pipefail

SCRIPT_DIR="\$(readlink -m "\${0%/*}")"

cd "\$SCRIPT_DIR/.."

supervisord --config "\$SCRIPT_DIR/supervisor.conf"
EoF
cat > "$STATE_CLUSTER/supervisord_stop" <<EoF
#!/usr/bin/env bash

set -uo pipefail

SCRIPT_DIR="\$(readlink -m "\${0%/*}")"

supervisorctl stop all

if [ -f "\$SCRIPT_DIR/supervisord.pid" ]; then
  kill "\$(<"\$SCRIPT_DIR/supervisord.pid")"
  rm -f "\$SCRIPT_DIR/supervisord.pid"
fi
EoF
chmod u+x "$STATE_CLUSTER"/{supervisorctl*,supervisord_*}

supervisord --config "$STATE_CLUSTER/supervisor.conf"

for _ in {1..5}; do
  if [ -S "$CARDANO_NODE_SOCKET_PATH" ]; then
    break
  fi
  echo "Waiting 5 seconds for bft node to start"
  sleep 5
done
[ -S "$CARDANO_NODE_SOCKET_PATH" ] || { echo "Failed to start the bft node, line $LINENO" >&2; exit 1; }  # assert


#
# In Babbage era
#


# start db-sync
if [ -n "${DBSYNC_REPO:-""}" ]; then
  echo "Starting db-sync"
  supervisorctl start dbsync
fi

sleep "$PROPOSAL_DELAY"
echo "Re-registering pools"

GENESIS_VERIFICATION=()
for vkey in "$STATE_CLUSTER"/shelley/genesis-keys/genesis*.vkey; do
  GENESIS_VERIFICATION+=("--genesis-verification-key-file" "$vkey")
done

GENESIS_SIGNING=()
for skey in "$STATE_CLUSTER"/shelley/genesis-keys/genesis?.skey; do
  GENESIS_SIGNING+=("--signing-key-file" "$skey")
done

DELEGATE_SIGNING=()
for skey in "$STATE_CLUSTER"/shelley/delegate-keys/delegate?.skey; do
  DELEGATE_SIGNING+=("--signing-key-file" "$skey")
done

# Tranfer funds, register stake addresses and pools, all in one big transaction:

cardano_cli_log query protocol-parameters \
  --testnet-magic "$NETWORK_MAGIC" \
  --out-file "$STATE_CLUSTER/pparams.json"

TXIN_ADDR="$(<"$STATE_CLUSTER"/shelley/genesis-utxo.addr)"
DEPOSITS="$(jq '2 * .protocolParams.keyDeposit' \
  < "$STATE_CLUSTER/shelley/genesis.json")"
NEEDED_AMOUNT="$(( (POOL_PLEDGE + DEPOSITS) * NUM_POOLS ))"
FEE_BUFFER=100000000
STOP_TXIN_AMOUNT="$((NEEDED_AMOUNT + FEE_BUFFER))"

TXINS=()
TXIN_COUNT=0
TXIN_AMOUNT=0
while read -r txhash txix amount _; do
  TXIN_AMOUNT="$((TXIN_AMOUNT + amount))"
  TXIN_COUNT="$((TXIN_COUNT + 1))"
  TXINS+=("--tx-in" "${txhash}#${txix}")
  if [ "$TXIN_AMOUNT" -ge "$STOP_TXIN_AMOUNT" ]; then
    break
  fi
done <<< "$(cardano_cli_log query utxo --testnet-magic \
            "$NETWORK_MAGIC" \
            --address "$TXIN_ADDR" |
            grep -E "lovelace$|[0-9]$|lovelace \+ TxOutDatumNone$")"

POOL_ARGS=()
for i in $(seq 1 $NUM_POOLS); do
  POOL_ARGS+=( \
    "--tx-out" "$(<"$STATE_CLUSTER/nodes/node-pool$i/owner.addr")+$POOL_PLEDGE" \
    "--certificate-file" "$STATE_CLUSTER/nodes/node-pool$i/stake.reg.cert" \
    "--certificate-file" "$STATE_CLUSTER/nodes/node-pool$i/stake-reward.reg.cert" \
    "--certificate-file" "$STATE_CLUSTER/nodes/node-pool$i/register.cert" \
    "--certificate-file" "$STATE_CLUSTER/nodes/node-pool$i/owner-stake.deleg.cert" \
  )
done

cardano_cli_log transaction build-raw \
  --babbage-era \
  --fee    0 \
  "${TXINS[@]}" \
  --tx-out "$TXIN_ADDR+0" \
  "${POOL_ARGS[@]}" \
  --out-file "$STATE_CLUSTER/shelley/transfer-register-delegate-fee-tx.txbody"

FEE="$(cardano_cli_log transaction calculate-min-fee \
        --testnet-magic "$NETWORK_MAGIC" \
        --protocol-params-file "$STATE_CLUSTER"/pparams.json \
        --tx-in-count 1 \
        --tx-out-count 3 \
        --witness-count 15 \
        --byron-witness-count 0 \
        --tx-body-file "$STATE_CLUSTER/shelley/transfer-register-delegate-fee-tx.txbody" |
        cut -d' ' -f1)"

TXOUT_AMOUNT="$((TXIN_AMOUNT - FEE - NEEDED_AMOUNT))"

cardano_cli_log transaction build-raw \
  --babbage-era \
  --fee    "$FEE" \
  "${TXINS[@]}" \
  --tx-out "$TXIN_ADDR+$TXOUT_AMOUNT" \
  "${POOL_ARGS[@]}" \
  --out-file "$STATE_CLUSTER/shelley/transfer-register-delegate-tx.txbody"

POOL_SIGNING=()
for i in $(seq 1 $NUM_POOLS); do
  POOL_SIGNING+=( \
    "--signing-key-file" "$STATE_CLUSTER/nodes/node-pool$i/owner-stake.skey" \
    "--signing-key-file" "$STATE_CLUSTER/nodes/node-pool$i/reward.skey" \
    "--signing-key-file" "$STATE_CLUSTER/nodes/node-pool$i/cold.skey" \
  )
done

cardano_cli_log transaction sign \
  "${POOL_SIGNING[@]}" \
  --signing-key-file "$STATE_CLUSTER/shelley/genesis-utxo.skey" \
  "${GENESIS_SIGNING[@]}" \
  "${DELEGATE_SIGNING[@]}" \
  --testnet-magic    "$NETWORK_MAGIC" \
  --tx-body-file     "$STATE_CLUSTER/shelley/transfer-register-delegate-tx.txbody" \
  --out-file         "$STATE_CLUSTER/shelley/transfer-register-delegate-tx.tx"

cardano_cli_log transaction submit \
  --tx-file "$STATE_CLUSTER/shelley/transfer-register-delegate-tx.tx" \
  --testnet-magic "$NETWORK_MAGIC"

sleep 2
for _ in {1..10}; do
  if ! cardano_cli_log query utxo "${TXINS[@]}" --testnet-magic "$NETWORK_MAGIC" | grep -q lovelace; then
    break
  fi
  sleep 2
done

echo "Cluster started. Run \`$SCRIPT_DIR/stop-cluster-hfc\` to stop"
